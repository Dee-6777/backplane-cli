// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/ocm-backplane/cloud/ssm.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ssm "github.com/aws/aws-sdk-go-v2/service/ssm"
	gomock "github.com/golang/mock/gomock"
)

// MockSSMClient is a mock of SSMClient interface.
type MockSSMClient struct {
	ctrl     *gomock.Controller
	recorder *MockSSMClientMockRecorder
}

// MockSSMClientMockRecorder is the mock recorder for MockSSMClient.
type MockSSMClientMockRecorder struct {
	mock *MockSSMClient
}

// NewMockSSMClient creates a new mock instance.
func NewMockSSMClient(ctrl *gomock.Controller) *MockSSMClient {
	mock := &MockSSMClient{ctrl: ctrl}
	mock.recorder = &MockSSMClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSMClient) EXPECT() *MockSSMClientMockRecorder {
	return m.recorder
}

// StartSession mocks base method.
func (m *MockSSMClient) StartSession(ctx context.Context, params *ssm.StartSessionInput, optFns ...func(*ssm.Options)) (*ssm.StartSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {


		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSession", varargs...)
	ret0, _ := ret[0].(*ssm.StartSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSession indicates an expected call of StartSession.
func (mr *MockSSMClientMockRecorder) StartSession(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockSSMClient)(nil).StartSession), varargs...)
}
